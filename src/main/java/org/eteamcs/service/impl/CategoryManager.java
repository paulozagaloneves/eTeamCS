package org.eteamcs.service.impl;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.eteamcs.dao.ICategoryDAO;
import org.eteamcs.model.Category;
import org.eteamcs.service.ICategoryManager;
import org.springframework.validation.Validator;


/**
 * Manager Implementation to table categorys
 * @author Paulo Neves
 * Generated by Javalee v. 1.1
 * $Id$
 */
public class CategoryManager implements ICategoryManager {
    private Log log = LogFactory.getLog(CategoryManager.class);
    private ICategoryDAO dao;
    private Validator validator;

    public void setCategoryDAO(ICategoryDAO dao) {
        this.dao = dao;
    }

    public void setValidator(Validator validator) {
    	this.validator = validator;
    }
    
    public List<Category> getCategories() {    	
    	LinkedHashMap<Long, ArrayList<Category>> categoriesMap = new LinkedHashMap<Long, ArrayList<Category>>();
    	List<Category> categories = new ArrayList<Category>();
    	List<Category> allCategories = dao.getCategories();
    	
    	// add all parent categories
    	for (Category category : allCategories) {
			if (category.getParentId() == null) {
				ArrayList<Category> aSubCategories = new ArrayList<Category>();
				aSubCategories.add(category);
				categoriesMap.put(category.getCategoryId(),aSubCategories);
			}
		}
    	
    	// add all child categories
    	for (Category category : allCategories) {
			if (category.getParentId() != null) {
				ArrayList<Category> aSubCategories = categoriesMap.get(category.getParentId());
				aSubCategories.add(category);
			}
		}
    	
    	for (Long categoryId : categoriesMap.keySet()) {
    		ArrayList<Category> aSubCategories = categoriesMap.get(categoryId);
    		
    		categories.addAll(aSubCategories);
    	}
    	
        return categories;
    }

    public List<Category> getCategoriesByParentId(Long parentId) {
    	List<Category> allCategories = dao.getCategoriesByParentId(parentId);
    	
    	return allCategories;
    }
    
    public Category getCategory(Long categoryId) {
        Category category = dao.getCategory(categoryId);

        if (category == null) {
            log.warn("(categoryId) '" + (categoryId) + "' not found in database.");
        }

        return category;
    }

    public Category getCategoryByName(String name, Integer parentId) {
        Category category = dao.getCategoryByName(name.toLowerCase(), parentId);

        if (category == null) {
            log.warn("(categoryName) '" + (name) + "' not found in database.");
        }

        return category;
    }    
    
    public Category saveCategory(Category category) {
        /*BindException errors = new BindException(category, "category");
        validator.validate(category, errors);
        if (errors.hasErrors()) {
        	throw new RuntimeException("validation failed!", errors);
        }*/
        dao.saveCategory(category);

        return category;
    }

    public void removeCategory(java.lang.Long categoryId) {
        dao.removeCategory(categoryId);
    }
	
}
